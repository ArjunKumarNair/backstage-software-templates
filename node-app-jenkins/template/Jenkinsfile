pipeline {
    agent {
        label 'windows'
    }

    environment {
        DOCKERHUB_USERNAME = credentials('DOCKERHUB_USERNAME_ARJUN')
        DOCKERHUB_TOKEN = credentials('DOCKERHUB_TOKEN_ARJUN')
        COMMIT_ID = "${env.GIT_COMMIT.take(6)}"
        APP_NAME = '${{ values.app_name }}'
        APP_ENV = '${{ values.app_env }}'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Set Commit ID') {
            steps {
                script {
                    env.COMMIT_ID = env.GIT_COMMIT.take(6)
                    echo "COMMIT_ID set to: ${env.COMMIT_ID}"
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                bat '''
                    echo %DOCKERHUB_TOKEN% | docker login --username %DOCKERHUB_USERNAME% --password-stdin
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def app_name = env.APP_NAME
                    bat """
                        docker build -t arjun150800/${app_name}:${env.COMMIT_ID} .
                    """
                }
            }
        }

        stage('Trivy Security Scan') {
            steps {
                script {
                    def app_name = env.APP_NAME
                    bat """
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.ps1 | powershell -Command -
                        trivy image arjun150800/${app_name}:${env.COMMIT_ID} --exit-code 1 --severity HIGH,CRITICAL
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def app_name = env.APP_NAME
                    bat """
                        docker push arjun150800/${app_name}:${env.COMMIT_ID}
                    """
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                script {
                    def commitId = env.COMMIT_ID
                    def app_name = env.APP_NAME
                    def app_env = env.APP_ENV
                    bat """
                        wsl helm upgrade --install ${app_name} ./charts/${app_name} -n ${app_env} --create-namespace --set image.tag=${commitId}
                    """
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
        }
    }
}